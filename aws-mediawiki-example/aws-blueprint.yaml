###########################################################
# This Blueprint installs the nodecellar application
# on an existing host.
###########################################################

tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml
  - types/mediawikitypes.yaml
  - plugins/kubernetes/plugin.yaml

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  size:
    description: >
      Size of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

  mysql_root_password:
    description: >
      MYSQL Root Password

node_templates:

  kubernetes:
    type: cloudify.nodes.Tier

  master_host:
    type: cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - target: kubernetes
        type: cloudify.relationships.contained_in
      - target: master_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: master_ip

  master_ip:
    type: cloudify.aws.nodes.ElasticIP

  master_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: master_security_group
      description: kubernetes master security group
      rules:
      - ip_protocol: tcp
        from_port: { get_property: [ master, master_port ]}
        to_port: { get_property: [ master, master_port ]}
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 4001
        to_port: 4001
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 8001
        to_port: 8001
        cidr_ip: 0.0.0.0/0

  master:
    type: cloudify.kubernetes.Master
    properties:
      install: true
      install_docker: true
    relationships:
      - type: cloudify.kubernetes.relationships.contained_in_host
        target: master_host

  minion_host:
    type: cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - target: master_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: kubernetes
        type: cloudify.relationships.contained_in


  minion:
    type: cloudify.kubernetes.Node
    properties:
      install_docker: true
    relationships:
      - type: cloudify.kubernetes.relationships.connected_to_master 
        target: master
      - type: cloudify.relationships.contained_in
        target: minion_host

  mediawiki:
    type: cloudify.kubernetes.Microservice
    properties:
      config_path: service.yaml
      config_overrides:
        - "['spec']['containers'][0]['env'][0]['value'] = '@{mysqld_host,ip}'"
        - { concat: ["['spec']['containers'][0]['env'][1]['value']=","'",{ get_property: [mysqld,port]},"'"]}
        - { concat: ["['spec']['containers'][0]['env'][3]['value']=","'",{ get_property: [mysqld,root_password]},"'"]}
        - { concat: ["['spec']['containers'][0]['env'][8]['value']=","'","http://@{master_ip,aws_resource_id}:8001", "'"]}
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.kubernetes.relationships.connected_to_master
        target: master
      - type: cloudify.relationships.connected_to
        target: mysqld

  mysqld_host:
    type:  cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mysqld_security_group

  mysqld_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: mysqld_security_group
      description: mysqld security group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ mysqld, port ] }
          to_port: { get_property: [ mysqld, port ] }
          cidr_ip: 0.0.0.0/0

  mysqld:
    type: nodecellar.nodes.Mysqld
    instances:
      deploy: 1
    properties:
      port: 3306
      root_password: { get_input: mysql_root_password }
    relationships:
      - type: cloudify.relationships.contained_in
        target: mysqld_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/mysql/mysql.py
            task_name: install
            fabric_env: {}
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/mysql/mysql.py
            task_name: start
            fabric_env: {}
        stop:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/mysql/mysql.py
            task_name: stop
            fabric_env: {}
        delete:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/mysql/mysql.py
            task_name: uninstall
            fabric_env: {}

outputs:
  mediawiki_info:
    description: MediaWiki connection info
    value:
      url: {concat: ["http://",{ get_attribute: [ master_ip, aws_resource_id ]},":8001"]}
